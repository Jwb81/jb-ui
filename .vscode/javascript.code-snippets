{
	"Constant": {
	  "prefix": "mc_constant",
	  "body": [
      "export const FETCH_${1:UPPERCASE}S = 'FETCH_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE}S_LOADING = 'FETCH_${1:UPPERCASE}S_LOADING';",
      "export const FETCH_${1:UPPERCASE}S_SUCCESS = 'FETCH_${1:UPPERCASE}S_SUCCESS';",
	  ],
	  "description": "Constant"
	},
	"Constants CRUD": {
    "prefix": "mc_constants_crud",
    "body": [
      "export const FETCH_${1:UPPERCASE}S = 'FETCH_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE}S_LOADING = 'FETCH_${1:UPPERCASE}S_LOADING';",
      "export const FETCH_${1:UPPERCASE}S_SUCCESS = 'FETCH_${1:UPPERCASE}S_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}S_FAILURE = 'FETCH_${1:UPPERCASE}S_FAILURE';",
      "export const RESET_${1:UPPERCASE}S = 'RESET_${1:UPPERCASE}S';",
      "export const FETCH_${1:UPPERCASE} = 'FETCH_${1:UPPERCASE}';",
      "export const FETCH_${1:UPPERCASE}_LOADING = 'FETCH_${1:UPPERCASE}_LOADING';",
      "export const FETCH_${1:UPPERCASE}_SUCCESS = 'FETCH_${1:UPPERCASE}_SUCCESS';",
      "export const FETCH_${1:UPPERCASE}_FAILURE = 'FETCH_${1:UPPERCASE}_FAILURE';",
      "export const SAVE_${1:UPPERCASE} = 'SAVE_${1:UPPERCASE}';",
      "export const SAVE_${1:UPPERCASE}_SUCCESS = 'SAVE_${1:UPPERCASE}_SUCCESS';",
      "export const SAVE_${1:UPPERCASE}_FAILURE = 'SAVE_${1:UPPERCASE}_FAILURE';",
      "export const UPDATE_ACTIVE_${1:UPPERCASE} = 'UPDATE_ACTIVE_${1:UPPERCASE}';",
      "export const RESET_ACTIVE_${1:UPPERCASE} = 'RESET_ACTIVE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE} = 'DELETE_${1:UPPERCASE}';",
      "export const DELETE_${1:UPPERCASE}_SUCCESS = 'DELETE_${1:UPPERCASE}_SUCCESS';",
      "export const DELETE_${1:UPPERCASE}_FAILURE = 'DELETE_${1:UPPERCASE}_FAILURE';",
      "export const RESET_DELETED_${1:UPPERCASE} = 'RESET_DELETED_${1:UPPERCASE}';",
      ""
    ],
    "description": "Constants CRUD"
  },
	"Action": {
    "prefix": "mc_action",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "} from '../constants/${3:camelCase}';",
      "",
      "export function fetch${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      ""
    ],
    "description": "Action"
  },
	"Action CRUD": {
    "prefix": "mc_action_crud",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "  FETCH_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE}S_SUCCESS,",
      "  FETCH_${1:UPPERCASE}S_FAILURE,",
      "  SAVE_${1:UPPERCASE},",
      "  SAVE_${1:UPPERCASE}_SUCCESS,",
      "  SAVE_${1:UPPERCASE}_FAILURE,",
      "  UPDATE_ACTIVE_${1:UPPERCASE},",
      "  RESET_ACTIVE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE}_SUCCESS,",
      "  DELETE_${1:UPPERCASE}_FAILURE,",
      "} from '../constants/${3:camelCase}';",
      "",
      "export function fetch${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}s(options) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S,",
      "    options,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sSuccess(response) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S_SUCCESS,",
      "    stats: response.stats,",
      "    results: response.results,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sFailure(error) {",
      "  return {",
      "    type: FETCH_${1:UPPERCASE}S_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function save${2:PascalCase}(${3:camelCase}) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE},",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function save${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function save${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: SAVE_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function updateActive${2:PascalCase}(${3:camelCase}) {",
      "  return {",
      "    type: UPDATE_ACTIVE_${1:UPPERCASE},",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function resetActive${2:PascalCase}(data) {",
      "  return {",
      "    type: RESET_ACTIVE_${1:UPPERCASE},",
      "    data,",
      "  };",
      "}",
      "export function delete${2:PascalCase}(${3:camelCase}Id) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE},",
      "    ${3:camelCase}Id,",
      "  };",
      "}",
      "export function delete${2:PascalCase}Success(${3:camelCase}) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE}_SUCCESS,",
      "    ${3:camelCase},",
      "  };",
      "}",
      "export function delete${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: DELETE_${1:UPPERCASE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      ""
    ],
    "description": "Action CRUD"
  },
  "Action Single": {
    "prefix": "mc_action_single",
    "body": [
      "export function fetch${1:Pascal}(options) {",
      "  return {",
      "    type: FETCH_${2:UPPER},",
      "    options,",
      "  };",
      "}",
      "export function fetch${1:Pascal}Success(response) {",
      "  return {",
      "    type: FETCH_${2:UPPER}_SUCCESS,",
      "    ...response,",
      "  };",
      "}",
      "export function fetch${1:Pascal}Failure(error) {",
      "  return {",
      "    type: FETCH_${2:UPPER}_FAILURE,",
      "    error,",
      "  };",
      "}"
    ],
    "description": "Action Single"
  },
	"Saga CRUD": {
    "prefix": "mc_saga_crud",
    "body": [
      "import { all, call, put, takeLatest } from 'redux-saga/effects';",
      "import { FETCH_${1:UPPERCASE}S, FETCH_${1:UPPERCASE}, SAVE_${1:UPPERCASE}, DELETE_${1:UPPERCASE} } from '../constants/${2:camelCase}';",
      "import {",
      "  fetch${3:PascalCase}sSuccess,",
      "  fetch${3:PascalCase}sFailure,",
      "  fetch${3:PascalCase}Success,",
      "  fetch${3:PascalCase}Failure,",
      "  save${3:PascalCase}Success,",
      "  save${3:PascalCase}Failure,",
      "  delete${3:PascalCase}Success,",
      "  delete${3:PascalCase}Failure,",
      "} from '../actions/${2:camelCase}';",
      "import {",
      "  fetch${3:PascalCase}s as fetch${3:PascalCase}sApi,",
      "  fetch${3:PascalCase} as fetch${3:PascalCase}Api,",
      "  create${3:PascalCase} as create${3:PascalCase}Api,",
      "  update${3:PascalCase} as update${3:PascalCase}Api,",
      "  delete${3:PascalCase} as delete${3:PascalCase}Api,",
      "} from '../apis/${2:camelCase}';",
      "",
      "export function* fetch${3:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}S, performFetch${3:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${3:PascalCase}sAction(action) {",
      "  try {",
      "    const response = yield call(fetch${3:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}sFailure(e));",
      "  }",
      "}",
      "export function* fetch${3:PascalCase}Saga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}, performFetch${3:PascalCase}Action);",
      "}",
      "function* performFetch${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(fetch${3:PascalCase}Api, action.${2:camelCase}Id);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "",
      "export function* save${3:PascalCase}Saga() {",
      "  yield takeLatest(SAVE_${1:UPPERCASE}, performSave${3:PascalCase}Action);",
      "}",
      "function* performSave${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = action.${2:camelCase}.id ? yield call(update${3:PascalCase}Api, action.${2:camelCase}) : yield call(create${3:PascalCase}Api, action.${2:camelCase});",
      "    if (response) {",
      "      yield put(save${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(save${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* delete${3:PascalCase}Saga() {",
      "  yield takeLatest(DELETE_${1:UPPERCASE}, performDelete${3:PascalCase}Action);",
      "}",
      "function* performDelete${3:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(delete${3:PascalCase}Api, action.${2:camelCase}Id);",
      "    if (response) {",
      "      yield put(delete${3:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(delete${3:PascalCase}Failure(e));",
      "  }",
      "}",
      "",
      "export default function* defaultSaga() {",
      "  return yield all([fetch${3:PascalCase}sSaga(), fetch${3:PascalCase}Saga(), save${3:PascalCase}Saga(), delete${3:PascalCase}Saga()]);",
      "}",
      ""
    ],
    "description": "Saga CRUD"
  },
  "Saga": {
    "prefix": "mc_saga",
    "body": [
      "export function* fetch${3:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:UPPERCASE}S, performFetch${3:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${3:PascalCase}sAction(action) {",
      "  try {",
      "    const response = yield call(fetch${3:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${3:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${3:PascalCase}sFailure(e));",
      "  }",
      "}"
    ],
    "description": "Saga"
  },
	"Component": {
	  "prefix": "mc_comp",
	  "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { makeStyles } from '@material-ui/styles';",
      "import styles from './${1:Name}.styles';",
      "const useStyles = makeStyles(styles);",
      "",
      "const ${1:Name} = ({ ${3:prop} }) => {",
      "  const classes = useStyles();",
      "  return <span className={classes.${2:camelCase}}>{${3:prop}}</span>;",
      "};",
      "${1:Name}.defaultProps = {};",
      "${1:Name}.propTypes = {",
      "  ${3:prop}: PropTypes.string,",
      "};",
      "",
      "export default ${1:Name};",
      ""
    ],
	  "description": "Generates Component"
	},
	"Container": {
    "prefix": "mc_container",
    "body": [
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { compose } from 'redux';",
      "import { fetch${1:PascalCase}s } from '../actions/${2:camelCase}';",
      "import { select${1:PascalCase}s } from '../selectors/${2:camelCase}';",
      "",
      "import ${1:PascalCase}s from '../components/${1:PascalCase}sPage';",
      "",
      "${1:PascalCase}s.propTypes = {",
      "  fetch${1:PascalCase}s: PropTypes.func,",
      "};",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  ${2:camelCase}s: select${1:PascalCase}s(),",
      "});",
      "",
      "function mapDispatchToProps(dispatch) {",
      "  return {",
      "    fetch${1:PascalCase}s: options => dispatch(fetch${1:PascalCase}s(options)),",
      "  };",
      "}",
      "",
      "const withConnect = connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps,",
      ");",
      "",
      "export default compose(withConnect)(${1:PascalCase}s);",
      ""
    ],
    "description": "Container"
  },
	"API CRUD": {
    "prefix": "mc_api_crud",
    "body": [
      "import { COOKIE_NAME } from '../../config/constants';",
      "import { buildUrl, getCookie } from '../utils';",
      "",
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/api/${2:camelCase}s`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}",
      "export function fetch${1:PascalCase}(${2:camelCase}Id) {",
      "  const url = buildUrl(`/api/${2:camelCase}s/${${2:camelCase}Id}`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      "export function create${1:PascalCase}(${2:camelCase}) {",
      "  const url = buildUrl('/api/${2:camelCase}s');",
      "  return fetch(url, {",
      "    method: 'POST',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    body: JSON.stringify(${2:camelCase}),",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      "export function update${1:PascalCase}(${2:camelCase}) {",
      "  const url = buildUrl(`/api/${2:camelCase}s/${${2:camelCase}.id}`);",
      "  return fetch(url, {",
      "    method: 'PUT',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    body: JSON.stringify(${2:camelCase}),",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      "export function delete${1:PascalCase}(${2:camelCase}Id) {",
      "  const url = buildUrl(`/api/${2:camelCase}s/${${2:camelCase}Id}`);",
      "  return fetch(url, {",
      "    method: 'DELETE',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    if (response.status === 401) {",
      "      const e = new Error();",
      "      e.code = 401;",
      "      throw e;",
      "    }",
      "    return {};",
      "  });",
      "}",
      ""
    ],
    "description": "API CRUD"
  },
  "API Route": {
    "prefix": "mc_api_route",
    "body": [
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/api/${2:camelCase}s`);",
      "  return fetch(url, {",
      "    method: '${3:method}',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}"
    ],
    "description": "API Route"
  },
	"Selector": {
    "prefix": "mc_selector",
    "body": [
      "import { createSelector } from 'reselect';",
      "",
      "/**",
      " * Direct selector to the ${1:camelCase}s state domain",
      " */",
      "export const select${2:PascalCase}sDomain = state => state.${1:camelCase};",
      "",
      "/**",
      " * Sub Domain Selectors",
      " */",
      "export const select${2:PascalCase}s = () =>",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.${1:camelCase}sList,",
      "  );",
      "export const selectNew${2:PascalCase}Domain = () =>",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.new${2:PascalCase},",
      "  );",
      "export const selectDeleted${2:PascalCase}Domain = () =>",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.deleted${2:PascalCase},",
      "  );",
      "export const selectActive${2:PascalCase} = () =>",
      "  createSelector(",
      "    select${2:PascalCase}sDomain,",
      "    ${1:camelCase}s => ${1:camelCase}s.active${2:PascalCase},",
      "  );",
      "",
      "export const select${2:PascalCase}sOptions = () =>",
      "  createSelector(",
      "    select${2:PascalCase}s,",
      "    ${1:camelCase}sListObject => ({",
      "      limit: ${1:camelCase}sListObject.limit,",
      "      offset: ${1:camelCase}sListObject.offset,",
      "      searchTerm: ${1:camelCase}sListObject.searchTerm,",
      "      filters: ${1:camelCase}sListObject.filters,",
      "      sort: ${1:camelCase}sListObject.sort,",
      "    }),",
      "  );",
      ""
    ],
    "description": "Selector"
  },
	"HOC": {
	  "prefix": "mc_hoc",
	  "body": [
		"import React from 'react';",
		"import { createStructuredSelector } from 'reselect';",
		"import { connect } from 'react-redux';",
		"import { withRouter } from 'react-router-dom';",
		"import { compose } from 'redux';",
		"",
		"import {",
		"  select${1:Name}List,",
		"  selectActive${1:Name},",
		"} from '../selectors/${2:lowercase}';",
		"",
		"import {",
		"  fetch${1:Name}s,",
		"  fetch${1:Name},",
		"  create${1:Name},",
		"  update${1:Name},",
		"  delete${1:Name},",
		"} from '../actions/${2:lowercase}';",
		"",
		"const mapStateToProps = createStructuredSelector({",
		"  ${2:lowercase}List: select${1:Name}List(),",
		"  ${2:lowercase}: selectActive${1:Name}(),",
		"});",
		"",
		"const mapDispatchToProps = dispatch => ({",
		"  fetch${1:Name}s: () => dispatch(fetch${1:Name}s()),",
		"  fetch${1:Name}: id => dispatch(fetch${1:Name}(id)),",
		"  create${1:Name}: (data) => dispatch(create${1:Name}(data)),",
		"  update${1:Name}: (data) => dispatch(update${1:Name}(data)),",
		"  delete${1:Name}: (id) => dispatch(delete${1:Name}(id)),",
		"});",
		"",
		"const withConnect = connect(mapStateToProps, mapDispatchToProps);",
		"const with${1:Name}s = Component => props => <Component {...props} />;",
		"",
		"const wrappedComponent = compose(",
		"  withConnect,",
		"  withRouter,",
		"  with${1:Name}s,",
		");",
		"",
		"export default wrappedComponent;",
		""
	  ],
	  "description": "HOC"
  },
  "Fixture": {
    "prefix": "mc_fixture",
    "body": [
      "import ${1:Name} from './${1:Name}';",
      "",
      "export default [",
      "  {",
      "    component: ${1:Name},",
      "    name: '${1:Name}',",
      "    mui: true,",
      "    props: {}",
      "  },",
      "];"
    ],
    "description": "Fixture"
  },
  "Server API Endpoint": {
    "prefix": "mc_server_api",
    "body": [
      "app.get('/api/${1:lowercaseName}', (req, res) => {",
      "  return res.status(200).json({",
      "    offset: 0,",
      "    limit: 100,",
      "    sort: [],",
      "    searchTerm: null,",
      "    filter: [],",
      "    total: 29823,",
      "    results: [],",
      "  });",
      "});",
      "",
      "app.get('/api/${1:lowercaseName}/:id', (req, res) => {",
      "  res.status(200).json({});",
      "});",
      "",
      "app.post('/api/${1:lowercaseName}', (req, res) => {",
      "  res.sendStatus(200);",
      "});",
      "",
      "app.put('/api/${1:lowercaseName}/:id', (req, res) => {",
      "  return res.sendStatus(204);",
      "});",
      "",
      "app.delete('/api/${1:lowercaseName}/:id', (req, res) => {",
      "  return res.sendStatus(202);",
      "});"
    ],
    "description": "Server API Endpoint"
  },
  "Component Test": {
    "prefix": "mc_component_test",
    "body": [
      "import React from 'react';",
      "import { mount } from 'enzyme';",
      "import { createMuiTheme } from '@material-ui/core/styles';",
      "import { ThemeProvider } from '@material-ui/styles';",
      "import ${1:ComponentName} from './${1:ComponentName}';",
      "import theme from '../../theme';",
      "",
      "describe('<${1:ComponentName} />', () => {",
      "  let ThemedComponent;",
      "  beforeAll(() => {",
      "    ThemedComponent = ({ children }) => <ThemeProvider theme={createMuiTheme(theme)}>{children}</ThemeProvider>; // eslint-disable-line",
      "  });",
      "  it('Renders component', () => {",
      "    const component = mount(",
      "      <ThemedComponent>",
      "        <${1:ComponentName} />",
      "      </ThemedComponent>,",
      "    );",
      "    expect(false).toBeTruthy();",
      "  });",
      "});"
    ],
    "description": "Component Test"
  },
  "Reducer": {
    "prefix": "mc_reducer",
    "body": [
      "import {",
      "  FETCH_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE}S_SUCCESS,",
      "  FETCH_${1:UPPERCASE}S_FAILURE,",
      "  RESET_${1:UPPERCASE}S,",
      "  FETCH_${1:UPPERCASE},",
      "  FETCH_${1:UPPERCASE}_SUCCESS,",
      "  FETCH_${1:UPPERCASE}_FAILURE,",
      "  SAVE_${1:UPPERCASE},",
      "  SAVE_${1:UPPERCASE}_SUCCESS,",
      "  SAVE_${1:UPPERCASE}_FAILURE,",
      "  UPDATE_ACTIVE_${1:UPPERCASE},",
      "  RESET_ACTIVE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE},",
      "  DELETE_${1:UPPERCASE}_SUCCESS,",
      "  DELETE_${1:UPPERCASE}_FAILURE,",
      "  RESET_DELETED_${1:UPPERCASE},",
      "} from '../constants/${3:camelCase}';",
      "import { RESET } from '../constants/auth';",
      "",
      "const initialState = {",
      "  ${3:camelCase}sList: {",
      "    error: null,",
      "    loading: false,",
      "    offset: 0,",
      "    limit: 20,",
      "    sort: [],",
      "    searchTerm: '',",
      "    filters: [],",
      "    total: 0,",
      "    results: [],",
      "  },",
      "  active${2:PascalCase}: {",
      "    ${3:camelCase}: {},",
      "    error: null,",
      "    loading: false,",
      "  },",
      "  new${2:PascalCase}: {",
      "    ${3:camelCase}: null,",
      "    error: null,",
      "    loading: false,",
      "  },",
      "  delete${2:PascalCase}: {",
      "    ${3:camelCase}: null,",
      "    error: null,",
      "    loading: false,",
      "  },",
      "};",
      "export default (state = initialState, action) => {",
      "  switch (action.type) {",
      "    case FETCH_${1:UPPERCASE}S:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}sList: {",
      "          ...state.${3:camelCase}sList,",
      "          ...action.options,",
      "          loading: true,",
      "        },",
      "      };",
      "    case FETCH_${1:UPPERCASE}S_SUCCESS:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}sList: {",
      "          results: action.results,",
      "          error: null,",
      "          loading: false,",
      "          offset: action.offset,",
      "          limit: action.limit,",
      "          sort: action.sort,",
      "          searchTerm: action.searchTerm,",
      "          filters: action.filters,",
      "          total: action.total,",
      "        },",
      "      };",
      "    case FETCH_${1:UPPERCASE}S_FAILURE:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}sList: {",
      "          ...initialState.${3:camelCase}sList,",
      "          loading: false,",
      "          error: action.error,",
      "        },",
      "      };",
      "    case RESET_${1:UPPERCASE}S:",
      "      return {",
      "        ...state,",
      "        ${3:camelCase}sList: initialState.${3:camelCase}sList,",
      "      };",
      "    case FETCH_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: { ...initialState.active${2:PascalCase}, loading: true },",
      "      };",
      "    case FETCH_${1:UPPERCASE}_SUCCESS:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ${3:camelCase}: action.${3:camelCase},",
      "          error: null,",
      "          loading: false,",
      "        },",
      "      };",
      "    case FETCH_${1:UPPERCASE}_FAILURE:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...initialState.active${2:PascalCase},",
      "          loading: false,",
      "          error: action.error,",
      "        },",
      "      };",
      "    case SAVE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...state.active${2:PascalCase},",
      "          loading: true,",
      "          error: null,",
      "        },",
      "      };",
      "    case SAVE_${1:UPPERCASE}_SUCCESS:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ${3:camelCase}: action.${3:camelCase},",
      "          loading: false,",
      "          error: null,",
      "        },",
      "      };",
      "    case SAVE_${1:UPPERCASE}_FAILURE:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...state.active${2:PascalCase},",
      "          loading: false,",
      "          error: action.error,",
      "        },",
      "      };",
      "    case UPDATE_ACTIVE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: {",
      "          ...state.active${2:PascalCase},",
      "          ${3:camelCase}: { ...state.active${2:PascalCase}.${3:camelCase}, ...action.${3:camelCase} },",
      "        },",
      "      };",
      "    case RESET_ACTIVE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        active${2:PascalCase}: initialState.active${2:PascalCase},",
      "      };",
      "    case DELETE_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ${3:camelCase}: action.${3:camelCase},",
      "          loading: true,",
      "        },",
      "      };",
      "    case DELETE_${1:UPPERCASE}_SUCCESS:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ...state.delete${2:PascalCase},",
      "          loading: false,",
      "        },",
      "      };",
      "    case DELETE_${1:UPPERCASE}_FAILURE:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ...initialState.delete${2:PascalCase},",
      "          error: action.error,",
      "        },",
      "      };",
      "    case RESET_DELETED_${1:UPPERCASE}:",
      "      return {",
      "        ...state,",
      "        delete${2:PascalCase}: {",
      "          ...initialState.delete${2:PascalCase},",
      "        },",
      "      };",
      "    case RESET:",
      "      return initialState;",
      "    default:",
      "      return state;",
      "  }",
      "};",
      ""
    ],
    "description": "Reducer"
  },
  "API Route List and Get": {
    "prefix": "mc_api_route_list_get",
    "body": [
      "export function fetch${1:Pascal}s(options) {",
      "  const url = buildUrl(`/${2:controller}`);",
      "  return fetch(withQuery(url, formatFilterAndSortOptions(options)), {",
      "    method: 'GET',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}",
      "export function fetch${1:Pascal}(id) {",
      "  const url = buildUrl(`${2:controller}/${id}`);",
      "  return fetch(url, {",
      "    method: 'method',",
      "    headers: new Headers({",
      "      Accept: 'application/json',",
      "      'Content-Type': 'application/json',",
      "      Authorization: `Bearer ${getCookie(COOKIE_NAME)}`,",
      "    }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  }).then(response => {",
      "    if (response.status === 200) {",
      "      return response.json();",
      "    }",
      "    const e = new Error();",
      "    e.code = response.status;",
      "    throw e;",
      "  });",
      "}"
    ],
    "description": "API Route List and Get"
  },
  "Component Comment": {
    "prefix": "mc_comment_component",
    "body": [
      "/**",
      " * @function components/${1:ComponentName}",
      " * @description ${2:description}",
      " * @param {${4:type}} ${3:prop} - ${3:prop}",
      " * @example",
      " * <${1:ComponentName}",
      " *  ${3:prop}={${3:prop}}",
      " * />",
      " */"
    ],
    "description": "Component Comment"
  },
  "Storybook Story": {
    "prefix": "mc_story",
    "body": [
      "import React from 'react';",
      "import ${1:Component} from './${1:Component}';",
      "",
      "export default {",
      "  component: ${1:Component},",
      "  title: '${1:Component}',",
      "};",
      "",
      "export const Default = () => <${1:Component} />;",
      ""
    ],
    "description": "Storybook Story"
  },
  "SVG Component": {
    "prefix": "mc_svg_component",
    "body": [
      "import React from 'react';",
      "",
      "export default () => (",
      "  <svg id=\"${1:name}\" data-name=\"${1:name}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">",
      "    <g>",
      "      ${2:path}",
      "    </g>",
      "  </svg>",
      ");",
      "",
      ""
    ],
    "description": "SVG Component"
  },
  "Text Field": {
    "prefix": "mc_text_field",
    "body": [
      "<TextField id='${1:camelCase}' name='${1:camelCase}' label='${2:String}' value={${3:model}.${1:camelCase}} onChange={handleChange('${1:camelCase}')} />",
    ],
    "description": "Text Field"
  },
}
